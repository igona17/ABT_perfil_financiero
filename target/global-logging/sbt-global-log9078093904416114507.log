[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Fernando\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Fernando\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.5 (Amazon.com Inc. Java 1.8.0_282)
[debug]       Load.loadUnit: plugins took 273.712ms
[debug]       Load.loadUnit: defsScala took 1.6466ms
[debug] [Loading] Scanning directory C:\Users\Fernando\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Fernando\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 42.0957 ms
[debug]           Load.resolveProject(global-plugins) took 139.2172ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Fernando\.sbt\1.0\plugins, plugins: List(<none>))) took 258.5323ms
[debug] [Loading] Done in C:\Users\Fernando\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 336.7206ms
[debug]       Load.loadUnit: cleanEvalClasses took 35.7575ms
[debug]     Load.loadUnit(file:/C:/Users/Fernando/.sbt/1.0/plugins/, ...) took 692.0071ms
[debug]   Load.apply: load took 1328.2138ms
[debug]   Load.apply: resolveProjects took 21.6375ms
[debug]   Load.apply: finalTransforms took 270.6342ms
[debug]   Load.apply: config.delegates took 48.7725ms
[debug]   Load.apply: Def.make(settings)... took 1495.3814ms
[debug]   Load.apply: structureIndex took 294.3087ms
[debug]   Load.apply: mkStreams took 14.7737ms
[info] loading global plugins from C:\Users\Fernando\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 12096.6903ms
[debug]           Load.loadUnit: plugins took 67.9318ms
[debug]           Load.loadUnit: defsScala took 0.006ms
[debug] [Loading] Scanning directory C:\Users\Fernando\Documents\Clientes\Qualia\spikes\abt-bancos\project
[debug]             Load.loadUnit: mkEval took 14.6619ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Fernando\Documents\Clientes\Qualia\spikes\abt-bancos\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 6.0378 ms
[info] loading settings for project abt-bancos-build from idea.sbt ...
[debug]               Load.resolveProject(abt-bancos-build) took 21.5137ms
[debug]             Load.loadTransitive: finalizeProject(Project(id abt-bancos-build, base: C:\Users\Fernando\Documents\Clientes\Qualia\spikes\abt-bancos\project, plugins: List(<none>))) took 28.9166ms
[debug] [Loading] Done in C:\Users\Fernando\Documents\Clientes\Qualia\spikes\abt-bancos\project, returning: (abt-bancos-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 402.0145ms
[debug]           Load.loadUnit: cleanEvalClasses took 12.7673ms
[debug]         Load.loadUnit(file:/C:/Users/Fernando/Documents/Clientes/Qualia/spikes/abt-bancos/project/, ...) took 485.1303ms
[debug]       Load.apply: load took 490.3447ms
[debug]       Load.apply: resolveProjects took 0.7079ms
[debug]       Load.apply: finalTransforms took 30.7296ms
[debug]       Load.apply: config.delegates took 0.89ms
[debug]       Load.apply: Def.make(settings)... took 239.9377ms
[debug]       Load.apply: structureIndex took 56.8432ms
[debug]       Load.apply: mkStreams took 0.0035ms
[info] loading project definition from C:\Users\Fernando\Documents\Clientes\Qualia\spikes\abt-bancos\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 1625.5049ms
[debug]     Load.loadUnit: defsScala took 0.0031ms
[debug] [Loading] Scanning directory C:\Users\Fernando\Documents\Clientes\Qualia\spikes\abt-bancos
[debug]       Load.loadUnit: mkEval took 0.3623ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Fernando\Documents\Clientes\Qualia\spikes\abt-bancos, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 5.8644 ms
[info] loading settings for project abt-bancos from build.sbt ...
[debug]         Load.resolveProject(abt-bancos) took 64.7479ms
[debug]       Load.loadTransitive: finalizeProject(Project(id abt-bancos, base: C:\Users\Fernando\Documents\Clientes\Qualia\spikes\abt-bancos, plugins: List(<none>))) took 72.8156ms
[debug] [Loading] Done in C:\Users\Fernando\Documents\Clientes\Qualia\spikes\abt-bancos, returning: (abt-bancos)
[debug]     Load.loadUnit: loadedProjectsRaw took 194.8764ms
[debug]     Load.loadUnit: cleanEvalClasses took 9.3438ms
[debug]   Load.loadUnit(file:/C:/Users/Fernando/Documents/Clientes/Qualia/spikes/abt-bancos/, ...) took 1830.636ms
[debug] Load.apply: load took 1833.8828ms
[debug] Load.apply: resolveProjects took 0.371ms
[debug] Load.apply: finalTransforms took 44.1955ms
[debug] Load.apply: config.delegates took 0.968ms
[debug] Load.apply: Def.make(settings)... took 239.7023ms
[debug] Load.apply: structureIndex took 64.72ms
[debug] Load.apply: mkStreams took 0.004ms
[info] set current project to abt-bancos (in build file:/C:/Users/Fernando/Documents/Clientes/Qualia/spikes/abt-bancos/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(idea-shell, None, None)
